trigger: none

# parameters:
# - name: string # Required as first property.
#   displayName: string # Human-readable name for the parameter.
#   type: string
#   default: string | parameters | [ parameters ] # Default value; if no default, then the parameter MUST be given by the user at runtime.
#   values: [ string ] # Allowed list of values (for some data types).

variables:
  dockerHubUsername: $(DOCKER_HUB_USERNAME)
  dockerHubPassword: $(DOCKER_HUB_ACCESS_TOKEN)
  privateKey: $(SSH_PRIVATE_KEY)
  host: $(PRODUCTION_HOST)
  user: $(PRODUCTION_USER)
#Installs Docker Buildx and sets up the Docker Hub login for building and pushing images.
stages:
  # - stage: Build
  #   jobs:
  #     - job: BuildDockerImage
  #       displayName: Build and Push Docker Image
  #       pool:
  #         vmImage: 'ubuntu-latest'
  #       steps:
  #         - checkout: self

  #         - task: DockerInstaller@0
  #           displayName: Set up Docker Buildx

  #         - task: Docker@2
  #           displayName: Login to Docker Hub
  #           inputs:
  #             command: login
  #             containerRegistry: DockerHub
  #             username: $(dockerHubUsername)
  #             password: $(dockerHubPassword)

  #         - task: Docker@2
  #           displayName: Build and push Docker image
  #           inputs:
  #             command: buildAndPush
  #             repository: the-image-name
  #             dockerfile: '.devcontainer/Dockerfile'
  #             tags: latest

  # - stage: Deploy
  #   dependsOn: Build
  #   jobs:
  #     - job: DeployJob
  #       pool:
  #         vmImage: 'ubuntu-latest'
  #       steps:
  #         - checkout: self

  #         - script: |
  #             echo "$(privateKey)" > private_key.pem
  #             chmod 600 private_key.pem
  #             scp -i private_key.pem -r . $(user)@$(host):/app
  #             ssh -i private_key.pem -t $(user)@$(host) "cd /app && docker-compose down && docker-compose pull && docker-compose up -d"
  #             rm -f private_key.pem
  #           displayName: Deploy to production server'

  - stage: Plan
    displayName: 'Terraform Plan'
    jobs:
    - job: TerraformPlan
      displayName: 'Terraform Plan'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: TerraformInstaller@main
        inputs:
          terraformVersion: '1.12.2'

    - script: |
        terraform --version
        terraform init -backend-config="storage_account_name=$(storageAccountName)" -backend-config="container_name=$(containerName)" -backend-config="key=$(key)" -backend-config="access_key=$(accessKey)"
        terragrunt plan -out=tfplan
      displayName: 'Terraform Init and Plan'

      

# pool:
#   vmImage: ubuntu-latest

# jobs:
#   - job: test_local
#     displayName: Test local dev container definition
#     steps:
#     - script: |
#         docker login -u $ACR_USERNAME -p $ACR_TOKEN $(ACR_NAME).azurecr.io
#       displayName: 'Log in to Azure Container Registry'
#       env:
#         ACR_NAME: $(ACR_NAME)
#         ACR_TOKEN: $(ACR_TOKEN)
#         ACR_USERNAME: $(ACR_USERNAME)

#     - script: |
#         printenv | sort
#       env:
#         IMAGE_TAG: $(IMAGE_TAG)

#     - task: Run.devcontainer@0
#       inputs:
#         imageName: '$(ACR_NAME).azurecr.io/devcontainers-ci/azdo-devcontainer-build-run-examples-acr'
#         runCmd: 'echo $PWD'
#         subFolder: '.'
#         env: ''
#         imageTag: $(IMAGE_TAG)
#         sourceBranchFilterForPush: ''

#   - job: test_run_args
#     displayName: Test run-args
#     steps:
#     - script: |
#         docker login -u $ACR_USERNAME -p $ACR_TOKEN $(ACR_NAME).azurecr.io
#       displayName: 'Log in to Azure Container Registry'
#       env:
#         ACR_NAME: $(ACR_NAME)
#         ACR_TOKEN: $(ACR_TOKEN)
#         ACR_USERNAME: $(ACR_USERNAME)

#     - task: DevcontainersCi@0
#       inputs:
#         imageName: '$(ACR_NAME).azurecr.io/devcontainers-ci/azdo-devcontainer-build-run/test/run-args'
#         subFolder: github-tests/Dockerfile/run-args
#         runCmd: echo $HOSTNAME && [[ $HOSTNAME == "my-host" ]]
#         env: ''
#         imageTag: $(IMAGE_TAG)
#         sourceBranchFilterForPush: ''

#   - job: test_env_vars_on_post_create
#     displayName: Test env-vars-on-post-create
#     steps:
#     - script: |
#         docker login -u $ACR_USERNAME -p $ACR_TOKEN $(ACR_NAME).azurecr.io
#       displayName: 'Log in to Azure Container Registry'
#       env:
#         ACR_NAME: $(ACR_NAME)
#         ACR_TOKEN: $(ACR_TOKEN)
#         ACR_USERNAME: $(ACR_USERNAME)

#     - task: DevcontainersCi@0
#       env: # TEST_ENV_VALUE1 is set via devcontainer.json using a localEnv reference
#         TEST_ENV_VALUE1: SetViaDevcontainerJsonLocalEnv
#       inputs:
#         imageName: '$(ACR_NAME).azurecr.io/devcontainers-ci/azdo-devcontainer-build-run/test/env-vars-on-post-create'
#         subFolder: github-tests/Dockerfile/env-vars-on-post-create
#         runCmd: |
#           cat marker.txt
#           cat marker.txt | grep 'post-create: TEST_ENV_VALUE1=SetViaDevcontainerJsonLocalEnv'
#           cat marker.txt | grep 'post-create: TEST_ENV_VALUE2=AdditionalEnvVar'
#         env: | # TEST_ENV_VALUE2 is an additional env var to pass to the container
#             TEST_ENV_VALUE2=AdditionalEnvVar
#         imageTag: $(IMAGE_TAG)
#         sourceBranchFilterForPush: ''


#   - job: test_simple
#     displayName: Test simple
#     steps:
#     - task: DevcontainersCi@0
#       inputs:
#         subFolder: github-tests/Dockerfile/run-args
#         runCmd: echo $HOSTNAME && [[ $HOSTNAME == "my-host" ]]
#     - script: |
#         echo "'runCmdOutput' value: $runCmdOutput"
#         if [["$runCmdOutput" = *my-host*]]; then
#           echo "'runCmdOutput' output of test_simple job doesn't contain expected value 'my-host'"
#           exit 1
#         fi

#   - job: test_config_file
#     displayName: Test configFile option
#     steps:
#     - task: DevcontainersCi@0
#       inputs:
#         subFolder: github-tests/Dockerfile/config-file
#         configFile: github-tests/Dockerfile/config-file/.devcontainer/subfolder/devcontainer.json
#         runCmd: echo $HOSTNAME && [[ $HOSTNAME == "my-host" ]]
#     - script: |
#         echo "'runCmdOutput' value: $runCmdOutput"
#         if [["$runCmdOutput" = *my-host*]]; then
#           echo "'runCmdOutput' output of test_config_file job doesn't contain expected value 'my-host'"
#           exit 1
#         fi

#   - job: test_build_args
#     displayName: Test build-args
#     steps:
#     - script: |
#         docker login -u $ACR_USERNAME -p $ACR_TOKEN $(ACR_NAME).azurecr.io
#       displayName: 'Log in to Azure Container Registry'
#       env:
#         ACR_NAME: $(ACR_NAME)
#         ACR_TOKEN: $(ACR_TOKEN)
#         ACR_USERNAME: $(ACR_USERNAME)

#     - script: |
#         printenv | sort
#       env:
#         IMAGE_TAG: $(IMAGE_TAG)

#     - task: DevcontainersCi@0
#       inputs:
#         imageName: '$(ACR_NAME).azurecr.io/devcontainers-ci/azdo-devcontainer-build-run/test/build-args'
#         subFolder: github-tests/Dockerfile/build-args
#         runCmd: echo $BUILD_ARG_TEST && [[ $BUILD_ARG_TEST == "Hello build-args!" ]]
#         env: ''
#         imageTag: $(IMAGE_TAG)
#         sourceBranchFilterForPush: ''

#   - job: test_dockerfile_context
#     displayName: Test Dockerfile context
#     steps:
#     - script: |
#         docker login -u $ACR_USERNAME -p $ACR_TOKEN $(ACR_NAME).azurecr.io
#       displayName: 'Log in to Azure Container Registry'
#       env:
#         ACR_NAME: $(ACR_NAME)
#         ACR_TOKEN: $(ACR_TOKEN)
#         ACR_USERNAME: $(ACR_USERNAME)

#     - script: |
#         printenv | sort
#       env:
#         IMAGE_TAG: $(IMAGE_TAG)

#     - task: DevcontainersCi@0
#       inputs:
#         imageName: '$(ACR_NAME).azurecr.io/devcontainers-ci/azdo-devcontainer-build-run/test/dockerfile-context'
#         subFolder: github-tests/Dockerfile/dockerfile-context
#         runCmd: /tmp/dummy.sh
#         env: ''
#         imageTag: $(IMAGE_TAG)
#         sourceBranchFilterForPush: ''

#   - job: test_feature_docker_from_docker
#     displayName: Test docker-from-docker using feature
#     steps:
#     - script: |
#         docker login -u $ACR_USERNAME -p $ACR_TOKEN $(ACR_NAME).azurecr.io
#       displayName: 'Log in to Azure Container Registry'
#       env:
#         ACR_NAME: $(ACR_NAME)
#         ACR_TOKEN: $(ACR_TOKEN)
#         ACR_USERNAME: $(ACR_USERNAME)

#     - script: |
#         printenv | sort
#       env:
#         IMAGE_TAG: $(IMAGE_TAG)

#     - task: DevcontainersCi@0
#       inputs:
#         imageName: '$(ACR_NAME).azurecr.io/devcontainers-ci/azdo-devcontainer-build-run/test/feature-docker-from-docker'
#         subFolder: github-tests/Dockerfile/feature-docker-from-docker
#         runCmd: make docker-build
#         env: ''
#         imageTag: $(IMAGE_TAG)
#         sourceBranchFilterForPush: ''

#   - job: test_no_runCmd
#     displayName: Test without runCmd
#     steps:
#     - task: DevcontainersCi@0
#       inputs:
#         subFolder: github-tests/Dockerfile/build-only

#   - job: test_platform_with_runcmd
#     displayName: Test with platform and runCmd
#     steps:
#     - script: |
#         docker login -u $ACR_USERNAME -p $ACR_TOKEN $(ACR_NAME).azurecr.io
#       displayName: 'Log in to Azure Container Registry'
#       env:
#         ACR_NAME: $(ACR_NAME)
#         ACR_TOKEN: $(ACR_TOKEN)
#         ACR_USERNAME: $(ACR_USERNAME)

#     - script: |
#         printenv | sort
#       env:
#         IMAGE_TAG: $(IMAGE_TAG)

#     # This can be omitted once runner images have a version of Skopeo > 1.4.1
#     - script: |
#         sudo apt purge buildah golang-github-containers-common podman skopeo
#         sudo apt autoremove --purge
#         REPO_URL="https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable"
#         source /etc/os-release
#         sudo sh -c "echo 'deb ${REPO_URL}/x${NAME}_${VERSION_ID}/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list"
#         sudo wget -qnv https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/x${NAME}_${VERSION_ID}/Release.key -O Release.key
#         sudo apt-key add Release.key
#         sudo apt-get update
#         sudo apt-get install skopeo
#       displayName: Update skopeo


#     - script: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
#       displayName: Set up QEMU

#     - script: docker buildx create --use
#       displayName: Set up docker buildx

#     - task: DevcontainersCi@0
#       inputs:
#         imageName: '$(ACR_NAME).azurecr.io/devcontainers-ci/azdo-devcontainer-build-run/test/platform-with-runcmd'
#         subFolder: github-tests/Dockerfile/platform-with-runcmd
#         platform: linux/amd64,linux/arm64
#         runCmd: echo $HOSTNAME && [[ $HOSTNAME == "my-host" ]]

#     - script: |
#         echo "'runCmdOutput' value: $runCmdOutput"
#         if [["$runCmdOutput" = *my-host*]]; then
#           echo "'runCmdOutput' output of test_simple job doesn't contain expected value 'my-host'"
#           exit 1
#         fi